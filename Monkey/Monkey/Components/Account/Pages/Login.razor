@page "/"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Monkey.Data
@using Monkey.Data.Data.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject NavigationManager NavManager

<PageTitle>Log in</PageTitle>

<div class="center-container">
    <div class="container1">
        <div class="row">
            <div class="col-md-6">
                <section>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <h1><b>ДОБРЕ ДОШЛИ!</b></h1>
                        <hr />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email" class="form-label">Имейл</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="password" class="form-label">Парола</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                Запомни ме
                            </label>
                        </div>
                        <div>
                            <button class="w-100 btn btn-lg btn-primary">Влезте</button>
                        </div>
                        <div>
                            <p>
                                <a href="Account/ForgotPassword">Забравена парола?</a>
                            </p>
                            <p>
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Регистрирайте се!</a>
                            </p>
                        </div>
                    </EditForm>
                </section>
            </div>
            <div class="col-md-6 image-container">
                <img src="https://th.bing.com/th/id/R.a8d7066cdaf2143c2333adc4045c5dd2?rik=N7tZm5hAwwN5Kw&pid=ImgRaw&r=0" alt="Alternate Text" class="login-image" />
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/home");
            Logger.LogInformation("Потребителят успешно влезна в акаунта си.");
            NavigationManager.NavigateTo(ReturnUrl ?? "/catalog");
        }

        else if (result.RequiresTwoFactor)
        {
            NavigationManager.NavigateTo(
                $"Account/LoginWith2fa?returnUrl={ReturnUrl}&rememberMe={Input.RememberMe}");
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            NavigationManager.NavigateTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }

    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Имейлът е грешен/задължителен!")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Паролата е грешна/задължителна!")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Запомни ме!")]
        public bool RememberMe { get; set; }
    }
}