@implements IDisposable
@inject NavigationManager NavigationManager

@{
    // Check if the current page is the login page
    var isLoginPage = NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == "";
    var isRegisterPage = NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == "Account/Register";
    var isNewPassword = NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == "Account/ForgotPassword";

}

@if (!isLoginPage && !isRegisterPage && !isNewPassword)
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Board Games</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" href="#">Начало</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Каталог</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Статистики</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Любими</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Свържи се с нас</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
}

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        if (currentUrl != "")
        {
            NavigationManager.LocationChanged += OnLocationChanged;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

