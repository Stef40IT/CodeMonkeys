@page "/game/edit/{id:int}"
@using Monkey.Core.Services.GameServices;
@using Monkey.Web.ViewModels.Game
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IGameService gameService;
@rendermode InteractiveServer

<PageTitle>Редактирай игра</PageTitle>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <NavLink href="/home" style="text-decoration: none">
            <a class="navbar-brand">Board Games</a>
        </NavLink>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" href="/home">Начало</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/catalog">Каталог</a>
                </li>
                @if(isAdmin)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/reports">Статистики</a>
                    </li>
                } 
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Свържи се с нас</a>
                </li>
                @if (isAdmin)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/game/create">Добави игра</a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link" @onclick="SignOut">Излез</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="field">
    <div class="container">
        <div class="content">
            <div class="description">РЕДАКТИРАЙ ИГРА</div>
            <div class="container-form">
                <EditForm method="post" Model="Game" OnValidSubmit="UpdateGame" FormName="GameForm">
                    <div>
                        <div class="text">
                            <div class="entry">
                                <label>Заглавие на игра</label>
                                <InputText @bind-Value="Game.Name"></InputText>
                            </div>
                            <br />
                            <div class="entry">
                                <label>Описание на игра</label>
                                <InputText @bind-Value="Game.Description"></InputText>
                            </div>
                        </div>
                        <br />
                        <div class="count">
                            <div class="entry">
                                <label>Сложност</label>
                                <InputNumber @bind-Value="Game.Difficulty" Min="1" Max="4"></InputNumber>
                            </div>
                            <br />
                            <div class="entry">
                                <label>Налични бройки</label>
                                <InputNumber @bind-Value="Game.Count" Min="0"></InputNumber>
                            </div>
                        </div>
                        <br />

                        <div class="image-input">
                            <div class="entry">
                                <label>Изображение</label>
                            </div>


                            <div class="file-upload-wrapper">
                                <label class="file-upload-label">
                                    Качете до @maxFileSize байтове:

                                    <InputFile OnChange="LoadFiles" />
                                </label>
                            </div>
                        </div>


                        @if (isLoading)
                        {
                            <p>Uploading...</p>
                        }
                        else
                        {
                            <ul class="filesLoaded">
                                @if (loadedFiles != null)
                                {
                                    <li>
                                        <ul>
                                            <li>Име на изображение: @loadedFiles.Name</li>
                                            <li>Последно променена: @loadedFiles.LastModified.ToString()</li>
                                            <li>Размер (битове): @loadedFiles.Size</li>
                                            <li>Тип съдържание: @loadedFiles.ContentType</li>
                                        </ul>
                                    </li>
                                }
                            </ul>
                        }
                        <br />
                    </div>
                    <div class="button1">
                        <button type="submit" class="submit-btn" value="submit">Публикувай</button>
                        <p role="status" class="statusMessage">@Message</p>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "GameForm")]
    public GameViewModel Game { get; set; } = new GameViewModel();
    bool isAdmin;

    public string Message { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var currentGame = await gameService.GetGameById(Id);
        Game.Name = currentGame.Name;
        Game.Description = currentGame.Description;
        Game.Difficulty = currentGame.Difficulty;
        Game.Count = currentGame.Count;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isAdmin = user.IsInRole("Admin");

        if (!user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
        else if (!isAdmin)
        {
            NavManager.NavigateTo("home");
        }
    }

    private void SignOut()
    {
        NavManager.NavigateTo("logout");
    }

    public async void UpdateGame()
    {
        var currentGame = await gameService.GetGameById(Id);

        if(loadedFiles == null)
        {
            Game.Picture = currentGame.Picture;
        }
        else
        {
            var extension = System.IO.Path.GetExtension(loadedFiles.Name);

            if (extension != ".jpg" && extension != ".png" && extension != ".jpeg")
            {
                Message = "Снимката трябва да е .png, .jpg или .jpeg";
                return;
            }

            string path = "/uploadedImages/" + System.Guid.NewGuid() + extension;
            await using FileStream fs = new("wwwroot" + path, FileMode.Create);
            await loadedFiles.OpenReadStream().CopyToAsync(fs);
            Game.Picture = path;
        }




        gameService.UpdateGame(Game, Id);
        Message = "Редактирана!";
        await Task.Delay(500);
        NavManager.NavigateTo("catalog");
    }

    public IBrowserFile? loadedFiles { get; set; } = null;
    public long maxFileSize = 1024 * 1500;
    public bool isLoading;

    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        try
        {
            loadedFiles = e.File;
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

}