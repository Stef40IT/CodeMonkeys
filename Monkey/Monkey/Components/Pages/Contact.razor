@page "/contact"
@using System.ComponentModel.DataAnnotations
@using MailKit.Net.Smtp
@using MimeKit
@using Monkey.Core.Services.EmailServices
@inject NavigationManager Navigation
@inject IEmailService emailService
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Board Games</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link" href="#">Начало</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Каталог</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Статистики</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Любими</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Свържи се с нас</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<div class="field">
    <div class="container">
        <div class="content">
            <div class="description">СВЪРЖИ СЕ С НАС</div>
            <div class="container-form">
                <EditForm Model="contactModel" OnValidSubmit="HandleSubmit" FormName="SubmitToGmail">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="entry">
                        <label for="name">Име:</label>
                        <InputText id="name" @bind-Value="contactModel.Name" required />
                        <ValidationMessage For="() => contactModel.Name" />
                    </div>

                    <div class="entry">
                        <label for="email">Email:</label>
                        <InputText id="email" @bind-Value="contactModel.Email" type="email" required />
                        <ValidationMessage For="() => contactModel.Email" />
                    </div>

                    <div class="entry">
                        <label for="subject">Тема:</label>
                        <InputText id="subject" @bind-Value="contactModel.Subject" required />
                        <ValidationMessage For="() => contactModel.Subject" />
                    </div>

                    <div class="entry">
                        <label for="message">Съобщение:</label>
                        <InputTextArea id="message" @bind-Value="contactModel.Message" required />
                        <ValidationMessage For="() => contactModel.Message" />
                    </div>

                    <button type="submit" class="submit-btn" value="submit">Изпрати</button>
                    @if(isSubmited)
                    {
                          <div class="confirmation-message">
                                    Вашето съобщение беше изпратено успешно!
                          </div>                        
                    }
                </EditForm>
            </div>
        </div>
        <div class="image">
            <img src="https://th.bing.com/th/id/R.a8d7066cdaf2143c2333adc4045c5dd2?rik=N7tZm5hAwwN5Kw&pid=ImgRaw&r=0" alt="Alternate Text" />
        </div>
    </div>
</div>

    @code {
    [SupplyParameterFromForm(FormName = "SubmitToGmail")]
    private ContactModel contactModel { get; set; } = new ContactModel();
    public bool isSubmited = false;
    private async Task HandleSubmit()
    {
        try
        {
            if (emailService != null)
            {
                await emailService.SendEmailAsync(contactModel.Name, contactModel.Email, contactModel.Subject, contactModel.Message);
                isSubmited = true;
            }
            else
            {
                Console.WriteLine("EmailService is not initialized.");
            }
        }
        catch (Exception ex)
        {
            // Handle or log the exception
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Subject is required")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Message is required")]
        public string Message { get; set; }
    }
}
