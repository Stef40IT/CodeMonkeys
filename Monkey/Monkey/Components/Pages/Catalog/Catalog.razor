@page "/catalog"
@rendermode InteractiveServer
@using Monkey.Core.Projections.Games
@using Monkey.Data.Data.Entities
@using Monkey.Core.Services.GameServices
@using Monkey.Core.Projections
@using Monkey.Web.ViewModels.Catalog
@inject NavigationManager NavManager

<PageTitle>Каталог</PageTitle>

<h1 class="catalog-title">Каталог</h1>
<div class="title-underline"></div>
<div>
    <label for="sort">Sort by: </label>
    <select id="sort" @bind="SelectedCriteria">
        <option value="">Select Sorting Criteria</option>
        <option value="Name">Name(^)</option>
        <option value="Name(Descending)">Name(_)</option>
        <option value="Difficulty">Difficulty</option>
        @*<option value="Rating">Rating</option>
        <option value="NumberOfPlayers">Number of Players</option>*@
    </select>
</div>
<div class="game-container">
    <div class="game-grid">
        @if (GameList == null || !GameList.Any())
        {
            <p>Loading games...</p>
        }
        else
        {
            @foreach (var gameRow in sortedGames.Chunk(4))
            {
                <div class="game-row">
                    @foreach (var game in gameRow)
                    {
                        <div class="game-card" @onclick="() => OpenGameDetails(game.Id)">
                            <img src="@game.Picture" alt="@game.Name" class="game-image" />
                            <div class="game-info">
                                <div class="game-name">@game.Name</div>
                                <div class="game-count">Available: @game.Count</div>
                                <div class="game-difficulty">Difficulty: @game.Difficulty</div>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private List<GameGeneralInfoProjection> GameList;
    private List<GameGeneralInfoProjection> sortedGames;
    private string selectedCriteria;
    protected override async Task OnInitializedAsync()
    {
        GameList = (await gameService.GetAllGames()).Take(20).ToList();
        sortedGames = GameList;
    }
    private string SelectedCriteria
    {
        get => selectedCriteria;
        set
        {
            selectedCriteria = value;
            OnCriteriaChanged();
        }
    }
    private void OnCriteriaChanged()
    {
        if (string.IsNullOrEmpty(selectedCriteria))
        {
            sortedGames = GameList;
            return;
        }

        switch (selectedCriteria)
        {
            case "Difficulty":
                sortedGames = GameList.OrderBy(g => g.Difficulty).ToList();
                break;
            case "Name":
                sortedGames = GameList.OrderBy(g => g.Name).ToList();
                break;
            case "Name(Descending)":
                sortedGames = GameList.OrderByDescending(g => g.Name).ToList();
                break;

            default:
                sortedGames = GameList;
                break;
        }
    }
    [Inject]
    private IGameService gameService { get; set; }

    private void OpenGameDetails(int gameId) => NavManager.NavigateTo("/game");
}