@page "/catalog"
@rendermode InteractiveServer
@using Monkey.Core.Projections.Games
@using Monkey.Data.Data.Entities
@using Monkey.Core.Services.GameServices
@using Monkey.Core.Services.UserService
@using Monkey.Core.Services.FavoriteServices
@using Monkey.Core.Projections
@using System.Linq
@using Monkey.Web.ViewModels.Catalog
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavManager
@inject IGameService gameService
@inject IFavoriteService favoriteService
@inject IUserService userService
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <NavLink href="/home" style="text-decoration: none">
            <a class="navbar-brand">Board Games</a>
        </NavLink>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                
                <li class="nav-item">
                    <NavLink href="/home" style="text-decoration: none">
                        <a class="nav-link">Начало</a>
                    </NavLink>
                </li>
                
                <li class="nav-item">
                    <a class="nav-link" href="/catalog">Каталог</a>
                </li>
                @if (isAdmin)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/reports">Статистики</a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Свържи се с нас</a>
                </li>
                @if (isAdmin)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/game/create">Добави игра</a>
                    </li>
                }
                <li class="nav-item">
                    <a class="nav-link" @onclick="SignOut">Излез</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<PageTitle>Каталог</PageTitle>

<div class="catalog-header">
    <div>
        <h1 class="catalog-title">Каталог</h1>
        <div class="title-underline"></div>
    </div>
    <div class="filter-container">
        <label for="sort"></label>
        <select id="sort" @bind="SelectedCriteria">
            <option value="">Избери критерия</option>
            <option value="Name">Име(А-Я)</option>
            <option value="Name(Descending)">Име(Я-А)</option>
            <option value="Difficulty">Сложност(1-4)</option>
            <option value="DifficultyDescending">Сложност(4-1)</option>
            <option value="Rating">Оценка</option>
            <option value="Count">Налични</option>
            <option value="Favorites">Любими</option>
        </select>
    </div>
</div>

<div class="game-container">
    <div class="game-grid">

        @if (GameList == null || !GameList.Any())
        {
            <p>Loading games...</p>
        }
        else
        {
            @foreach (var gameRow in sortedGames.Chunk(4))
            {
                <div class="game-row">
                    @foreach (var game in gameRow)
                    {
                        <div class="game-card" @onclick="() => OpenGameDetails(game.Id)">
                            <img src="@game.Picture" alt="@game.Name" class="game-image" />
                            <div class="game-info">
                               
                                <div class="game-name">@game.Name</div>
                                <div class="game-count">Налични бройки: @game.Count</div>
                                <div class="game-difficulty">Сложност: @game.Difficulty</div>
                            </div>
                            <div class="favorite-icon">
                                <svg viewBox="0 0 24 24" width="24" height="24" class="@GetHeartClass(game.Id).Result" @onclick:stopPropagation @onclick="async () => await ToggleFavorite(game.Id)">
                                    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                                </svg>

                            </div>
                            @if (isAdmin)
                            {
                                <button class="deleteButton" @onclick:stopPropagation @onclick="async () => await Delete(game.Id) ">Изтрий</button>
                                <button class="editButton" @onclick:stopPropagation @onclick="async () => await Update(game.Id)">Редактирай</button>
                            }
                        </div>
                     
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private List<GameGeneralInfoProjection> GameList;
    private List<GameGeneralInfoProjection> sortedGames;
    private List<Favorite> favoriteList;
    private List<GameGeneralInfoProjection> favoriteGamesList;
    private string selectedCriteria;

    private string CurrentUserId;
    private ApplicationUser user;

    bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        GameList = (await gameService.GetAllGames()).Take(20).ToList();
        sortedGames = GameList;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrin = authState.User;
        CurrentUserId = userPrin.FindFirstValue(ClaimTypes.NameIdentifier);
        favoriteList = await favoriteService.GetFav(CurrentUserId);
        favoriteGamesList = await favoriteService.GetFavProj(CurrentUserId);
        user = await userManager.GetUserAsync(userPrin);
        isAdmin = userPrin.IsInRole("Admin");

        if (!userPrin.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    private void SignOut()
    {
        NavManager.NavigateTo("logout");
    }

    private string SelectedCriteria
    {
        get => selectedCriteria;
        set
        {
            selectedCriteria = value;
            OnCriteriaChanged();
        }
    }

    private async void OnCriteriaChanged()
    {
        if (string.IsNullOrEmpty(selectedCriteria))
        {
            sortedGames = GameList;
            return;
        }

        switch (selectedCriteria)
        {
            case "Difficulty":
                sortedGames = GameList.OrderBy(g => g.Difficulty).ToList();
                break;
            case "DifficultyDescending":
                sortedGames = GameList.OrderByDescending(g => g.Difficulty).ToList();
                break;
            case "Name":
                sortedGames = GameList.OrderBy(g => g.Name).ToList();
                break;
            case "Name(Descending)":
                sortedGames = GameList.OrderByDescending(g => g.Name).ToList();
                break;
            case "Rating":
                sortedGames = GameList.OrderByDescending(g => AverageRating(g.Raitings)).ToList();
                break;
            case "Count":
                sortedGames = GameList.OrderByDescending(g => g.Count).ToList();
                break;
            case "Favorites":
                sortedGames = favoriteGamesList;
                break;
            default:
                sortedGames = GameList;
                break;
        }
    }

    private void OpenGameDetails(int gameId) => NavManager.NavigateTo($"/game/{gameId}");
    private void SendToHome() => NavManager.NavigateTo($"/home");

    private double AverageRating(ICollection<Rating> ratings)
    {
        if (ratings.Count() != 0) return ratings.Average(r => r.Rate);
        else return 0;
    }

    private async Task ToggleFavorite(int gameId)
    {
        if (favoriteService.Contains(gameId, CurrentUserId).Result)
        {
            
            
            await favoriteService.RemoveFromFavoritesAsync(CurrentUserId, gameId);
            favoriteList = await favoriteService.GetFav(CurrentUserId);
        }
        else
        {
            await favoriteService.AddToFavoritesAsync(CurrentUserId, gameId);
            favoriteList = await favoriteService.GetFav(CurrentUserId);
        }
        favoriteGamesList = await favoriteService.GetFavProj(CurrentUserId);
    }
    private async Task Delete(int id)
    {
        gameService.Delete(id);
        GameList = (await gameService.GetAllGames()).Take(20).ToList();
        sortedGames = GameList;
    }
    private async Task Update(int id)
    {
        NavManager.NavigateTo($"game/edit/{id}");
    }

    private async Task<string> GetHeartClass(int gameId) 
    { 
        foreach(Favorite f in favoriteList)
        {
            if(f.GameId == gameId)
            {
                return "heart-icon filled";
            }
        }

        return "heart-icon";
    }
}