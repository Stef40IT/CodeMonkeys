@page "/game/{id:int}"

@using MimeKit
@using Monkey.Core.Services.EmailServices
@using Monkey.Core.Services.GameServices
@using Monkey.Data;
@using Monkey.Data.Data.Entities;
@using Microsoft.AspNetCore.Identity
@using Monkey.Core.Projections.Games
@using System.Collections.Generic;
@using Monkey.Core.Services.ReservatioService;
@using Monkey.Data.Data.Repositories
@using Monkey.Core.Projections;
@using Monkey.Core.Services.UserService
@using System.Security.Claims
@inject IGameService gameService;
@inject IReservationService reservService
@inject IUserService userService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IEmailService emailSender
@rendermode InteractiveServer


<h3>Игра</h3>


<div class="game-container">
    <div class="game-header">
        <div class="game-title">@gameName</div>
        <div class="game-info">Сложност: @game.Difficulty | Оставащи: @game.Count</div>
    </div>
    <div class="game-image-container">
        <img src="@game.Picture" class="game-image" />
        <div class="action-buttons">
            <button class="action-button" @onclick="Return"><b>Върни</b></button>
        </div>
    </div>
    <div class="game-details-container">
        <div class="game-details">
            <b>  <p>@game.Description</p></b>
        </div>
        <div class="forma">
            <form>
                <div class="form-field">
                    <label for="start-date">Дата от:</label>
                    <input type="date" id="start-date" name="start-date" required @bind="bookDate">
                </div>
                <div class="form-field">
                    <label for="start-time">Час от:</label>
                    <input type="datetime" id="start-time" name="start-time" required pattern="[0-9]{1,2}:[0-9]{2}" @bind="bookTime">
                </div>
                <div class="form-field">
                    <label for="end-date">Дата до:</label>
                    <input type="date" id="end-date" name="end-date" required @bind="returnDate">
                </div>
                <div class="form-field">
                    <label for="end-time">Час до:</label>
                    <input type="datetime" id="end-time" name="end-time" required pattern="[0-9]{1,2}:[0-9]{2}" @bind="returnTime">
                </div>
                <button type="submit" @onclick="Add"><b>Запази игра</b></button>
            </form>
        </div>
    </div>
</div>
@if (game.Comments != null)
{
    <table>
        <thead>
        <td>Text</td>
        <td>Hour</td>
        </thead>
        @foreach (var commnet in game?.Comments)
        {
            <td>@commnet.Text</td>
            <td>@commnet.Hour</td>
        }
    </table>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    private string gameName;
    private TimeSpan bookTime;
    private TimeSpan returnTime;
    private DateTime bookDate = DateTime.Today;
    private DateTime returnDate = DateTime.Today;
    Reservation reserv;
    Game? game;
    ApplicationUser user;
    string? userId;

    protected override async void OnInitialized()
    {

        if (Id.HasValue)
        {
            gameName = (await gameService.GetGameById(Id)).Name;
        }
        game = await gameService.GetGameById(Id);
        reserv = new Reservation();
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var User = authState.User;
        userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        user = await userService.GetById(userId);
    }

    private async Task Add()
    {
        if (Id.HasValue)
        {
            game = await gameService.GetGameById(Id);
        }
        else
        {
            game = await gameService.GetByName(gameName);
        }


        if (!game.isBooked && DateTime.Compare(bookDate, returnDate) <= 0)
        {
            reserv.Game = game;
            reserv.BookDate = bookDate + bookTime;
            reserv.ReturnDate = returnDate + returnTime;
            reserv.User = user;
            reservService.Create(reserv);
           await Task.Delay(100);
            await gameService.UpdateCountDown(game);

        }
        else
        {
            throw new Exception("Играта не е в наличност");

        }
        reserv = new Reservation();
        // user = new ApplicationUser();
    }

    private async void Return()
    {
        List<Reservation> l = reservService.GetReservations(Id, userId);
        if (reservService.isBooked(ref l, userId, Id))
        {

            gameService.UpdateCountUp((await gameService.GetGameById(Id)));
            await Task.Delay(100);
            reservService.Update(l[0]);
            try
            {
                if (emailSender != null)
                {
                    string subject = "Оценка";
                    string text = $"Здравейте!Искамe да Ви благодарим, че върнахте бордовата игра {game.Name}. Ще се радваме да чуем вашето мнение и впечатления от нея. Вашият отзив е много важен за нас и ще помогне на други клиенти да направят информиран избор.Ако имате време, моля, посетете ни в магазина или отговорете на този имейл с вашите коментари. Ще бъде чудесно да научим какво Ви е харесало или какво бихте искали да бъде подобрено.";

                    var mailMessage = new MimeMessage();
                    mailMessage.From.Add(new MailboxAddress("Board GamesInc", "boardgamesrentalsinc@gmail.com"));
                    mailMessage.To.Add(new MailboxAddress(user.UserName, user.Email));
                    mailMessage.Subject = subject;
                    mailMessage.Body = new TextPart("plain")
                        {
                            Text = text
                        };

                    using (var smtpClient = new MailKit.Net.Smtp.SmtpClient())
                    {
                        await smtpClient.ConnectAsync("smtp.gmail.com", 587, MailKit.Security.SecureSocketOptions.StartTls);
                        await smtpClient.AuthenticateAsync("boardgamesrentalsinc@gmail.com", "rbwy tbxd miws uptl");
                        await smtpClient.SendAsync(mailMessage);
                        await smtpClient.DisconnectAsync(true);
                    }


                }
                else
                {
                    Console.WriteLine("EmailService is not initialized.");
                }
            }
            catch (Exception ex)
            {
                // Handle or log the exception
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
        else
        {
            new Exception("Cannot return game");
           
        }
        

    }
}