@page "/game/{id:int}"
@using MimeKit
@using Monkey.Core.Services.EmailServices
@using Monkey.Core.Services.CommentServices
@using Monkey.Core.Services.GameServices
@using Monkey.Core.Services.Ratings
@using Monkey.Data;
@using Monkey.Data.Data.Entities;
@using Microsoft.AspNetCore.Identity
@using Monkey.Core.Projections.Games
@using System.Collections.Generic;
@using Monkey.Core.Services.ReservatioService;
@using Monkey.Data.Data.Repositories
@using Monkey.Core.Projections;
@using Monkey.Core.Services.UserService
@using System.Security.Claims
@inject ICommentService CommentService
@inject IGameService gameService
@inject IReservationService reservService
@inject IUserService userService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IEmailService emailSender
@inject IRatingService ratingService;
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <NavLink href="/home" style="text-decoration: none">
            <a class="navbar-brand">Board Games</a>
        </NavLink>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink href="/home" style="text-decoration: none">
                        <a class="nav-link">Начало</a>
                    </NavLink>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/catalog">Каталог</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Статистики</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/contact">Свържи се с нас</a>
                </li>
                @if (isAdmin)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/game/create">Добави игра</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

<div class="game-container">
    <div class="game-header">
        <div class="game-title">@gameName</div>
        <div class="game-info">Сложност: @game.Difficulty | Оставащи: @game.Count</div>
    </div>
    <div class="game-image-container">
        <img src="@game.Picture" class="game-image" />
        <div class="action-buttons">
            <button class="action-button" @onclick="Return"><b>@returnGame</b></button>
        </div>
    </div>
    <div class="game-details-container">
        <div class="game-details">
            <b>  <p>@game.Description</p></b>
        </div>
        <div class="forma">
            <form>
                <div class="form-field">
                    <label for="start-date">Дата от:</label>
                    <input type="date" id="start-date" name="start-date" required @bind="bookDate">
                </div>
                <div class="form-field">
                    <label for="start-time">Час от:</label>
                    <input type="datetime" id="start-time" name="start-time" required pattern="[0-9]{1,2}:[0-9]{2}" @bind="bookTime">
                </div>
                <div class="form-field">
                    <label for="end-date">Дата до:</label>
                    <input type="date" id="end-date" name="end-date" required @bind="returnDate">
                </div>
                <div class="form-field">
                    <label for="end-time">Час до:</label>
                    <input type="datetime" id="end-time" name="end-time" required pattern="[0-9]{1,2}:[0-9]{2}" @bind="returnTime">
                </div>
                <button type="submit" @onclick="Add"><b>@bookGame</b></button>
                
            </form>
        </div>
    </div>
</div>

<div class="rating">
    <input type="radio" id="star5" name="rating" @onclick="() => RateValue(5)" value="5" checked="@(ratingValue == 5)" /><label for="star5">&#9733;</label>
    <input type="radio" id="star4" name="rating" @onclick="() => RateValue(4)" value="4" checked="@(ratingValue == 4)" /><label for="star4">&#9733;</label>
    <input type="radio" id="star3" name="rating" @onclick="() => RateValue(3)" value="3" checked="@(ratingValue == 3)" /><label for="star3">&#9733;</label>
    <input type="radio" id="star2" name="rating" @onclick="() => RateValue(2)" value="2" checked="@(ratingValue == 2)" /><label for="star2">&#9733;</label>
    <input type="radio" id="star1" name="rating" @onclick="() => RateValue(1)" value="1" checked="@(ratingValue == 1)" /><label for="star1">&#9733;</label>
</div>

<EditForm method="post" Model="Comment" OnValidSubmit="HandleValidSubmit" FormName="commentForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <input @bind-value="Comment.Text" placeholder="Вашият коментар" class="comment-input"></input>

    <button type="submit" class="comment-button">
        <b>Добави</b>
    </button>
</EditForm>

@if (comments == null)
{
    <p>Зареждане...</p>
}
else
{
    <ul>
        @foreach (var comment in comments)
        {
            <li>
                <strong>@comment.User.UserName</strong> (@comment.Hour.ToString("g")):
                <p>@comment.Text</p>
                @if (isAdmin)
                {
                    <button @onclick="async () => await Delete(comment)" class="deleteButton">Изтрий</button>
                }
            </li>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red;">@errorMessage</p>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private string gameName;
    private TimeSpan bookTime;
    private TimeSpan returnTime;
    private DateTime bookDate = DateTime.Today;
    private DateTime returnDate = DateTime.Today;
    Reservation reserv;
    Game? game;
    ApplicationUser user;
    string? userId;
    private List<Comment> comments;
    [SupplyParameterFromForm(FormName = "commentForm")]
    public Comment Comment { get; set; } = new Comment();
    private string errorMessage;
    public bool isAdmin;

    Rating? rating;
    private int ratingValue;
    private string bookGame = "Запази игра";
    private string returnGame = "Върни игра";

    protected override async Task OnInitializedAsync()
    {

        gameName = (await gameService.GetGameById(Id)).Name;
        game = await gameService.GetGameById(Id);
        reserv = new Reservation();
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var User = authState.User;
        userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
        user = await userService.GetById(userId);
        isAdmin = User.IsInRole("Admin");

        await LoadComments();

        if (User.Identity.IsAuthenticated)
        {
            Comment.UserId = User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            NavManager.NavigateTo("/login");
        }
        var rating = await ratingService.GetRatingByUserAndGameAsync(userId, Id);
        if (rating != null)
        {
            ratingValue = rating.Rate;
        }
    }

    private async Task Delete(Comment comment)
    {
        await CommentService.DeleteCommentAsync(comment);
        await LoadComments();
    }

    private async Task LoadComments()
    {
        comments = await CommentService.GetCommentsByGameIdAsync(game.Id);
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Comment.Text))
        {
            errorMessage = "Коментарът не може да бъде празен.";
            return;
        }
        Comment.GameId = Id;
        Comment.Hour = DateTime.Now;
        await CommentService.AddCommentAsync(Comment);
        comments = new List<Comment>();
        await LoadComments();
        if(ratingValue != 0)
        {
            await Rate(ratingValue);
        }

        NavManager.NavigateTo($"game/{Id}", forceLoad: true);
    }

    private async Task Add()
    {
        if (Id != null)
        {
            game = await gameService.GetGameById(Id);
        }
        else
        {
            game = await gameService.GetByName(gameName);
        }

        if (!game.isBooked && DateTime.Compare(bookDate, returnDate) <= 0)
        {
            reserv.Game = game;
            reserv.BookDate = bookDate + bookTime;
            reserv.ReturnDate = returnDate + returnTime;
            reserv.User = user;
            reservService.Create(reserv);
            await Task.Delay(100);
            await gameService.UpdateCountDown(game);
            bookGame = "Запазена!";
            returnGame = "Върни игра";
        }
        else
        {
            throw new Exception("Играта не е в наличност");
        }


        reserv = new Reservation();

    }

    private async void Return()
    {
        List<Reservation> l = reservService.GetReservations(Id, userId);
        if (reservService.isBooked(ref l, userId, Id))
        {
                        returnGame = "Върната!";
                        bookGame = "Запази игра";
            gameService.UpdateCountUp((await gameService.GetGameById(Id)));
            await Task.Delay(100);
            reservService.Update(l[0]);
            try
            {
                if (emailSender != null)
                {
                    string subject = "Оценка";
                    string text = $"Здравейте!Искамe да Ви благодарим, че върнахте бордовата игра {game.Name}. Ще се радваме да чуем вашето мнение и впечатления от нея. Вашият отзив е много важен за нас и ще помогне на други клиенти да направят информиран избор.Ако имате време, моля, посетете ни в магазина или отговорете на този имейл с вашите коментари. Ще бъде чудесно да научим какво Ви е харесало или какво бихте искали да бъде подобрено.";

                    var mailMessage = new MimeMessage();
                    mailMessage.From.Add(new MailboxAddress("Board GamesInc", "boardgamesrentalsinc@gmail.com"));
                    mailMessage.To.Add(new MailboxAddress(user.UserName, user.Email));
                    mailMessage.Subject = subject;
                    mailMessage.Body = new TextPart("plain")
                        {
                            Text = text
                        };

                    using (var smtpClient = new MailKit.Net.Smtp.SmtpClient())
                    {
                        await smtpClient.ConnectAsync("smtp.gmail.com", 587, MailKit.Security.SecureSocketOptions.StartTls);
                        await smtpClient.AuthenticateAsync("boardgamesrentalsinc@gmail.com", "rbwy tbxd miws uptl");
                        await smtpClient.SendAsync(mailMessage);
                        await smtpClient.DisconnectAsync(true);
                    }
                }
                else
                {
                    Console.WriteLine("EmailService is not initialized.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
        else
        {
            new Exception("Cannot return game");
        }
    }

    private async Task Rate(int value)
    {
        var existingRating = await ratingService.GetRatingByUserAndGameAsync(user.Id, game.Id);
        if (existingRating == null)
        {
            rating = new Rating
                {
                    UserId = user.Id,
                    GameId = game.Id,
                    Rate = value
                };
            await ratingService.AddRatingAsync(rating);
            
        }
        else
        {
            existingRating.Rate = value;
            ratingService.UpdateRatingAsync(existingRating);
        }
    }
    private async void RateValue(int values)
    {
        ratingValue = values;
    }
}

